stages:
  - install
  - build
  - test
  - build_docker
  - deploy

Npm ci:
  stage: install
  image: node:18
  script:
    - cd frontend
    - npm ci
  cache:
    policy: push
    key: ${CI_COMMIT_REF_SLUG}-modules
    paths:
      - 'frontend/node_modules'

Build:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm run build
  cache:
    - key: ${CI_COMMIT_REF_SLUG}-modules
      policy: pull
      paths:
        - 'frontend/node_modules'
    - key: ${CI_COMMIT_REF_SLUG}-build
      policy: push
      paths:
        - "frontend/build"
  artifacts:
    paths:
      - "frontend/build/"
    expire_in: 1 hour

Test:
  stage: test
  image: node:18
  script:
    - cd frontend
    - npm run test -- --watchAll=false
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}-modules
    paths:
      - 'frontend/node_modules'

Build docker:
  stage: build_docker
  image: docker:latest
  services: []
  variables:
    IMAGE_NAME: aspiregray/result-frontend
  only:
    - main
  when: manual
  before_script:
    - docker version
  script:
    - docker login -u aspiregray -p $DOCKER_PWD
    - docker build -f frontend.Dockerfile -t $IMAGE_NAME .
    - docker push $IMAGE_NAME
  dependencies:
    - Build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-build
    policy: pull
    paths:
      - "frontend/build"

Deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client sshpass
  only:
    - main
  when: manual
  script:
    - |
      sshpass -p $SSH_PASS ssh -o StrictHostKeyChecking=no $SSH_HOST "
      cd 8.FrontOps_1.Task &&
      git pull origin-gitlab main &&
      docker compose pull nginx &&
      docker compose stop nginx &&
      docker compose up -d nginx"
  dependencies:
    - Build docker