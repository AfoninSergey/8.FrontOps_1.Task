stages:
  - install
  - build
  - build_docker
  - deploy

Npm ci:
  stage: install
  image: node:18
  script:
    - cd frontend
    - npm ci
  cache:
    policy: push
    key: ${CI_COMMIT_REF_SLUG}-modules
    paths:
      - 'frontend/node_modules'

Build:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm run build
  cache:
    - key: ${CI_COMMIT_REF_SLUG}-modules
      policy: pull
      paths:
        - 'frontend/node_modules'
    - key: ${CI_COMMIT_REF_SLUG}-build
      policy: push
      paths:
        - "frontend/build"

Test:
  stage: build
  image: node:18
  script:
    - cd frontend
    - npm run test
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}-modules
    paths:
      - 'frontend/node_modules'

Build docker:
  stage: build_docker
  image: docker
  services:
    - docker:dind
  variables:
    IMAGE_NAME: aspiregray/result-frontend
  only:
    - main
  when: manual
  script:
    - docker login -u aspiregray -p ${DOCKER_PWD}
    - docker build -f frontend.Dockerfile -t ${IMAGE_NAME} .
    - docker push ${IMAGE_NAME}
  cache:
    key: ${CI_COMMIT_REF_SLUG}-build
    policy: pull
    paths:
      - "frontend/build"

Deploy:
  stage: deploy
  image: ringcentral/sshpass
  only:
    - main
  when: manual
  script:
    - sshpass -p ${SSH_PASS} ssh ${SSH_HOST} "
      cd 8.FrontOps_1.Task &&
      git pull &&
      docker compose pull nginx &&
      docker stop pull nginx &&
      docker compose up -d nginx"